// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MAX_MULTIMINT(): BigInt {
    let result = super.call("MAX_MULTIMINT", "MAX_MULTIMINT():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_MULTIMINT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_MULTIMINT",
      "MAX_MULTIMINT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_PREMIUM_PER_WALLET(): BigInt {
    let result = super.call(
      "MAX_PREMIUM_PER_WALLET",
      "MAX_PREMIUM_PER_WALLET():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_PREMIUM_PER_WALLET(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_PREMIUM_PER_WALLET",
      "MAX_PREMIUM_PER_WALLET():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_PREMIUM_RESERVED_SUPPLY(): BigInt {
    let result = super.call(
      "MAX_PREMIUM_RESERVED_SUPPLY",
      "MAX_PREMIUM_RESERVED_SUPPLY():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_PREMIUM_RESERVED_SUPPLY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_PREMIUM_RESERVED_SUPPLY",
      "MAX_PREMIUM_RESERVED_SUPPLY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_PREMIUM_SUPPLY(): BigInt {
    let result = super.call(
      "MAX_PREMIUM_SUPPLY",
      "MAX_PREMIUM_SUPPLY():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_PREMIUM_SUPPLY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_PREMIUM_SUPPLY",
      "MAX_PREMIUM_SUPPLY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_PREMIUM_WHITELIST_SUPPLY(): BigInt {
    let result = super.call(
      "MAX_PREMIUM_WHITELIST_SUPPLY",
      "MAX_PREMIUM_WHITELIST_SUPPLY():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_PREMIUM_WHITELIST_SUPPLY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_PREMIUM_WHITELIST_SUPPLY",
      "MAX_PREMIUM_WHITELIST_SUPPLY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_STANDARD_PER_WALLET(): BigInt {
    let result = super.call(
      "MAX_STANDARD_PER_WALLET",
      "MAX_STANDARD_PER_WALLET():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_STANDARD_PER_WALLET(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_STANDARD_PER_WALLET",
      "MAX_STANDARD_PER_WALLET():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_STANDARD_RESERVED_SUPPLY(): BigInt {
    let result = super.call(
      "MAX_STANDARD_RESERVED_SUPPLY",
      "MAX_STANDARD_RESERVED_SUPPLY():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_STANDARD_RESERVED_SUPPLY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_STANDARD_RESERVED_SUPPLY",
      "MAX_STANDARD_RESERVED_SUPPLY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_STANDARD_SUPPLY(): BigInt {
    let result = super.call(
      "MAX_STANDARD_SUPPLY",
      "MAX_STANDARD_SUPPLY():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_STANDARD_SUPPLY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_STANDARD_SUPPLY",
      "MAX_STANDARD_SUPPLY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_STANDARD_WHITELIST_SUPPLY(): BigInt {
    let result = super.call(
      "MAX_STANDARD_WHITELIST_SUPPLY",
      "MAX_STANDARD_WHITELIST_SUPPLY():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_STANDARD_WHITELIST_SUPPLY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_STANDARD_WHITELIST_SUPPLY",
      "MAX_STANDARD_WHITELIST_SUPPLY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_SUPPLY(): BigInt {
    let result = super.call("MAX_SUPPLY", "MAX_SUPPLY():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MAX_SUPPLY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MAX_SUPPLY", "MAX_SUPPLY():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MINTER_TYPEHASH(): Bytes {
    let result = super.call(
      "MINTER_TYPEHASH",
      "MINTER_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_MINTER_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "MINTER_TYPEHASH",
      "MINTER_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PREMIUM_PRICE(): BigInt {
    let result = super.call("PREMIUM_PRICE", "PREMIUM_PRICE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PREMIUM_PRICE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "PREMIUM_PRICE",
      "PREMIUM_PRICE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  STANDARD_PRICE(): BigInt {
    let result = super.call("STANDARD_PRICE", "STANDARD_PRICE():(uint256)", []);

    return result[0].toBigInt();
  }

  try_STANDARD_PRICE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "STANDARD_PRICE",
      "STANDARD_PRICE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowedPremiumMintCount(minter: Address): BigInt {
    let result = super.call(
      "allowedPremiumMintCount",
      "allowedPremiumMintCount(address):(uint256)",
      [ethereum.Value.fromAddress(minter)]
    );

    return result[0].toBigInt();
  }

  try_allowedPremiumMintCount(minter: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowedPremiumMintCount",
      "allowedPremiumMintCount(address):(uint256)",
      [ethereum.Value.fromAddress(minter)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowedStandardMintCount(minter: Address): BigInt {
    let result = super.call(
      "allowedStandardMintCount",
      "allowedStandardMintCount(address):(uint256)",
      [ethereum.Value.fromAddress(minter)]
    );

    return result[0].toBigInt();
  }

  try_allowedStandardMintCount(minter: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowedStandardMintCount",
      "allowedStandardMintCount(address):(uint256)",
      [ethereum.Value.fromAddress(minter)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseTokenURI(): string {
    let result = super.call("baseTokenURI", "baseTokenURI():(string)", []);

    return result[0].toString();
  }

  try_baseTokenURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseTokenURI", "baseTokenURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  checkWhitelist(signature: Bytes): boolean {
    let result = super.call("checkWhitelist", "checkWhitelist(bytes):(bool)", [
      ethereum.Value.fromBytes(signature)
    ]);

    return result[0].toBoolean();
  }

  try_checkWhitelist(signature: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkWhitelist",
      "checkWhitelist(bytes):(bool)",
      [ethereum.Value.fromBytes(signature)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  saleIsActive(): boolean {
    let result = super.call("saleIsActive", "saleIsActive():(bool)", []);

    return result[0].toBoolean();
  }

  try_saleIsActive(): ethereum.CallResult<boolean> {
    let result = super.tryCall("saleIsActive", "saleIsActive():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalPremiumReservedSupply(): BigInt {
    let result = super.call(
      "totalPremiumReservedSupply",
      "totalPremiumReservedSupply():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalPremiumReservedSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalPremiumReservedSupply",
      "totalPremiumReservedSupply():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalPremiumSupply(): BigInt {
    let result = super.call(
      "totalPremiumSupply",
      "totalPremiumSupply():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalPremiumSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalPremiumSupply",
      "totalPremiumSupply():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalPremiumWhitelistMints(): BigInt {
    let result = super.call(
      "totalPremiumWhitelistMints",
      "totalPremiumWhitelistMints():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalPremiumWhitelistMints(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalPremiumWhitelistMints",
      "totalPremiumWhitelistMints():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalStandardReservedSupply(): BigInt {
    let result = super.call(
      "totalStandardReservedSupply",
      "totalStandardReservedSupply():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalStandardReservedSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalStandardReservedSupply",
      "totalStandardReservedSupply():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalStandardSupply(): BigInt {
    let result = super.call(
      "totalStandardSupply",
      "totalStandardSupply():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalStandardSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalStandardSupply",
      "totalStandardSupply():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalStandardWhitelistMints(): BigInt {
    let result = super.call(
      "totalStandardWhitelistMints",
      "totalStandardWhitelistMints():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalStandardWhitelistMints(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalStandardWhitelistMints",
      "totalStandardWhitelistMints():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  whitelistSaleIsActive(): boolean {
    let result = super.call(
      "whitelistSaleIsActive",
      "whitelistSaleIsActive():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_whitelistSaleIsActive(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "whitelistSaleIsActive",
      "whitelistSaleIsActive():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get tokenName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get tokenSymbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get customBaseURI_(): string {
    return this._call.inputValues[2].value.toString();
  }

  get payees(): Array<Address> {
    return this._call.inputValues[3].value.toAddressArray();
  }

  get shares(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }

  get standardPrice(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get premiumPrice(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class FlipSaleStateCall extends ethereum.Call {
  get inputs(): FlipSaleStateCall__Inputs {
    return new FlipSaleStateCall__Inputs(this);
  }

  get outputs(): FlipSaleStateCall__Outputs {
    return new FlipSaleStateCall__Outputs(this);
  }
}

export class FlipSaleStateCall__Inputs {
  _call: FlipSaleStateCall;

  constructor(call: FlipSaleStateCall) {
    this._call = call;
  }
}

export class FlipSaleStateCall__Outputs {
  _call: FlipSaleStateCall;

  constructor(call: FlipSaleStateCall) {
    this._call = call;
  }
}

export class FlipWhitelistSaleStateCall extends ethereum.Call {
  get inputs(): FlipWhitelistSaleStateCall__Inputs {
    return new FlipWhitelistSaleStateCall__Inputs(this);
  }

  get outputs(): FlipWhitelistSaleStateCall__Outputs {
    return new FlipWhitelistSaleStateCall__Outputs(this);
  }
}

export class FlipWhitelistSaleStateCall__Inputs {
  _call: FlipWhitelistSaleStateCall;

  constructor(call: FlipWhitelistSaleStateCall) {
    this._call = call;
  }
}

export class FlipWhitelistSaleStateCall__Outputs {
  _call: FlipWhitelistSaleStateCall;

  constructor(call: FlipWhitelistSaleStateCall) {
    this._call = call;
  }
}

export class MintPremiumCall extends ethereum.Call {
  get inputs(): MintPremiumCall__Inputs {
    return new MintPremiumCall__Inputs(this);
  }

  get outputs(): MintPremiumCall__Outputs {
    return new MintPremiumCall__Outputs(this);
  }
}

export class MintPremiumCall__Inputs {
  _call: MintPremiumCall;

  constructor(call: MintPremiumCall) {
    this._call = call;
  }

  get count(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintPremiumCall__Outputs {
  _call: MintPremiumCall;

  constructor(call: MintPremiumCall) {
    this._call = call;
  }
}

export class MintPremiumReservedCall extends ethereum.Call {
  get inputs(): MintPremiumReservedCall__Inputs {
    return new MintPremiumReservedCall__Inputs(this);
  }

  get outputs(): MintPremiumReservedCall__Outputs {
    return new MintPremiumReservedCall__Outputs(this);
  }
}

export class MintPremiumReservedCall__Inputs {
  _call: MintPremiumReservedCall;

  constructor(call: MintPremiumReservedCall) {
    this._call = call;
  }

  get count(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintPremiumReservedCall__Outputs {
  _call: MintPremiumReservedCall;

  constructor(call: MintPremiumReservedCall) {
    this._call = call;
  }
}

export class MintPremiumReservedToAddressCall extends ethereum.Call {
  get inputs(): MintPremiumReservedToAddressCall__Inputs {
    return new MintPremiumReservedToAddressCall__Inputs(this);
  }

  get outputs(): MintPremiumReservedToAddressCall__Outputs {
    return new MintPremiumReservedToAddressCall__Outputs(this);
  }
}

export class MintPremiumReservedToAddressCall__Inputs {
  _call: MintPremiumReservedToAddressCall;

  constructor(call: MintPremiumReservedToAddressCall) {
    this._call = call;
  }

  get count(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class MintPremiumReservedToAddressCall__Outputs {
  _call: MintPremiumReservedToAddressCall;

  constructor(call: MintPremiumReservedToAddressCall) {
    this._call = call;
  }
}

export class MintPremiumWhitelistCall extends ethereum.Call {
  get inputs(): MintPremiumWhitelistCall__Inputs {
    return new MintPremiumWhitelistCall__Inputs(this);
  }

  get outputs(): MintPremiumWhitelistCall__Outputs {
    return new MintPremiumWhitelistCall__Outputs(this);
  }
}

export class MintPremiumWhitelistCall__Inputs {
  _call: MintPremiumWhitelistCall;

  constructor(call: MintPremiumWhitelistCall) {
    this._call = call;
  }

  get count(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get signature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class MintPremiumWhitelistCall__Outputs {
  _call: MintPremiumWhitelistCall;

  constructor(call: MintPremiumWhitelistCall) {
    this._call = call;
  }
}

export class MintStandardCall extends ethereum.Call {
  get inputs(): MintStandardCall__Inputs {
    return new MintStandardCall__Inputs(this);
  }

  get outputs(): MintStandardCall__Outputs {
    return new MintStandardCall__Outputs(this);
  }
}

export class MintStandardCall__Inputs {
  _call: MintStandardCall;

  constructor(call: MintStandardCall) {
    this._call = call;
  }

  get count(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintStandardCall__Outputs {
  _call: MintStandardCall;

  constructor(call: MintStandardCall) {
    this._call = call;
  }
}

export class MintStandardReservedCall extends ethereum.Call {
  get inputs(): MintStandardReservedCall__Inputs {
    return new MintStandardReservedCall__Inputs(this);
  }

  get outputs(): MintStandardReservedCall__Outputs {
    return new MintStandardReservedCall__Outputs(this);
  }
}

export class MintStandardReservedCall__Inputs {
  _call: MintStandardReservedCall;

  constructor(call: MintStandardReservedCall) {
    this._call = call;
  }

  get count(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintStandardReservedCall__Outputs {
  _call: MintStandardReservedCall;

  constructor(call: MintStandardReservedCall) {
    this._call = call;
  }
}

export class MintStandardReservedToAddressCall extends ethereum.Call {
  get inputs(): MintStandardReservedToAddressCall__Inputs {
    return new MintStandardReservedToAddressCall__Inputs(this);
  }

  get outputs(): MintStandardReservedToAddressCall__Outputs {
    return new MintStandardReservedToAddressCall__Outputs(this);
  }
}

export class MintStandardReservedToAddressCall__Inputs {
  _call: MintStandardReservedToAddressCall;

  constructor(call: MintStandardReservedToAddressCall) {
    this._call = call;
  }

  get count(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class MintStandardReservedToAddressCall__Outputs {
  _call: MintStandardReservedToAddressCall;

  constructor(call: MintStandardReservedToAddressCall) {
    this._call = call;
  }
}

export class MintStandardWhitelistCall extends ethereum.Call {
  get inputs(): MintStandardWhitelistCall__Inputs {
    return new MintStandardWhitelistCall__Inputs(this);
  }

  get outputs(): MintStandardWhitelistCall__Outputs {
    return new MintStandardWhitelistCall__Outputs(this);
  }
}

export class MintStandardWhitelistCall__Inputs {
  _call: MintStandardWhitelistCall;

  constructor(call: MintStandardWhitelistCall) {
    this._call = call;
  }

  get count(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get signature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class MintStandardWhitelistCall__Outputs {
  _call: MintStandardWhitelistCall;

  constructor(call: MintStandardWhitelistCall) {
    this._call = call;
  }
}

export class ReleaseCall extends ethereum.Call {
  get inputs(): ReleaseCall__Inputs {
    return new ReleaseCall__Inputs(this);
  }

  get outputs(): ReleaseCall__Outputs {
    return new ReleaseCall__Outputs(this);
  }
}

export class ReleaseCall__Inputs {
  _call: ReleaseCall;

  constructor(call: ReleaseCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ReleaseCall__Outputs {
  _call: ReleaseCall;

  constructor(call: ReleaseCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get customBaseURI_(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class SetMaxPremiumWhitelistSupplyCall extends ethereum.Call {
  get inputs(): SetMaxPremiumWhitelistSupplyCall__Inputs {
    return new SetMaxPremiumWhitelistSupplyCall__Inputs(this);
  }

  get outputs(): SetMaxPremiumWhitelistSupplyCall__Outputs {
    return new SetMaxPremiumWhitelistSupplyCall__Outputs(this);
  }
}

export class SetMaxPremiumWhitelistSupplyCall__Inputs {
  _call: SetMaxPremiumWhitelistSupplyCall;

  constructor(call: SetMaxPremiumWhitelistSupplyCall) {
    this._call = call;
  }

  get maxSupply(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxPremiumWhitelistSupplyCall__Outputs {
  _call: SetMaxPremiumWhitelistSupplyCall;

  constructor(call: SetMaxPremiumWhitelistSupplyCall) {
    this._call = call;
  }
}

export class SetMaxStandardWhitelistSupplyCall extends ethereum.Call {
  get inputs(): SetMaxStandardWhitelistSupplyCall__Inputs {
    return new SetMaxStandardWhitelistSupplyCall__Inputs(this);
  }

  get outputs(): SetMaxStandardWhitelistSupplyCall__Outputs {
    return new SetMaxStandardWhitelistSupplyCall__Outputs(this);
  }
}

export class SetMaxStandardWhitelistSupplyCall__Inputs {
  _call: SetMaxStandardWhitelistSupplyCall;

  constructor(call: SetMaxStandardWhitelistSupplyCall) {
    this._call = call;
  }

  get maxSupply(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMaxStandardWhitelistSupplyCall__Outputs {
  _call: SetMaxStandardWhitelistSupplyCall;

  constructor(call: SetMaxStandardWhitelistSupplyCall) {
    this._call = call;
  }
}

export class SetMultiMintCall extends ethereum.Call {
  get inputs(): SetMultiMintCall__Inputs {
    return new SetMultiMintCall__Inputs(this);
  }

  get outputs(): SetMultiMintCall__Outputs {
    return new SetMultiMintCall__Outputs(this);
  }
}

export class SetMultiMintCall__Inputs {
  _call: SetMultiMintCall;

  constructor(call: SetMultiMintCall) {
    this._call = call;
  }

  get maxMultiMint(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMultiMintCall__Outputs {
  _call: SetMultiMintCall;

  constructor(call: SetMultiMintCall) {
    this._call = call;
  }
}

export class SetPremiumLimitPerWalletCall extends ethereum.Call {
  get inputs(): SetPremiumLimitPerWalletCall__Inputs {
    return new SetPremiumLimitPerWalletCall__Inputs(this);
  }

  get outputs(): SetPremiumLimitPerWalletCall__Outputs {
    return new SetPremiumLimitPerWalletCall__Outputs(this);
  }
}

export class SetPremiumLimitPerWalletCall__Inputs {
  _call: SetPremiumLimitPerWalletCall;

  constructor(call: SetPremiumLimitPerWalletCall) {
    this._call = call;
  }

  get maxPerWallet(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPremiumLimitPerWalletCall__Outputs {
  _call: SetPremiumLimitPerWalletCall;

  constructor(call: SetPremiumLimitPerWalletCall) {
    this._call = call;
  }
}

export class SetPremiumPriceCall extends ethereum.Call {
  get inputs(): SetPremiumPriceCall__Inputs {
    return new SetPremiumPriceCall__Inputs(this);
  }

  get outputs(): SetPremiumPriceCall__Outputs {
    return new SetPremiumPriceCall__Outputs(this);
  }
}

export class SetPremiumPriceCall__Inputs {
  _call: SetPremiumPriceCall;

  constructor(call: SetPremiumPriceCall) {
    this._call = call;
  }

  get price(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetPremiumPriceCall__Outputs {
  _call: SetPremiumPriceCall;

  constructor(call: SetPremiumPriceCall) {
    this._call = call;
  }
}

export class SetStandardLimitPerWalletCall extends ethereum.Call {
  get inputs(): SetStandardLimitPerWalletCall__Inputs {
    return new SetStandardLimitPerWalletCall__Inputs(this);
  }

  get outputs(): SetStandardLimitPerWalletCall__Outputs {
    return new SetStandardLimitPerWalletCall__Outputs(this);
  }
}

export class SetStandardLimitPerWalletCall__Inputs {
  _call: SetStandardLimitPerWalletCall;

  constructor(call: SetStandardLimitPerWalletCall) {
    this._call = call;
  }

  get maxPerWallet(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetStandardLimitPerWalletCall__Outputs {
  _call: SetStandardLimitPerWalletCall;

  constructor(call: SetStandardLimitPerWalletCall) {
    this._call = call;
  }
}

export class SetStandardPriceCall extends ethereum.Call {
  get inputs(): SetStandardPriceCall__Inputs {
    return new SetStandardPriceCall__Inputs(this);
  }

  get outputs(): SetStandardPriceCall__Outputs {
    return new SetStandardPriceCall__Outputs(this);
  }
}

export class SetStandardPriceCall__Inputs {
  _call: SetStandardPriceCall;

  constructor(call: SetStandardPriceCall) {
    this._call = call;
  }

  get price(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetStandardPriceCall__Outputs {
  _call: SetStandardPriceCall;

  constructor(call: SetStandardPriceCall) {
    this._call = call;
  }
}

export class SetWhitelistSigningAddressCall extends ethereum.Call {
  get inputs(): SetWhitelistSigningAddressCall__Inputs {
    return new SetWhitelistSigningAddressCall__Inputs(this);
  }

  get outputs(): SetWhitelistSigningAddressCall__Outputs {
    return new SetWhitelistSigningAddressCall__Outputs(this);
  }
}

export class SetWhitelistSigningAddressCall__Inputs {
  _call: SetWhitelistSigningAddressCall;

  constructor(call: SetWhitelistSigningAddressCall) {
    this._call = call;
  }

  get newSigningKey(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetWhitelistSigningAddressCall__Outputs {
  _call: SetWhitelistSigningAddressCall;

  constructor(call: SetWhitelistSigningAddressCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
